#!/usr/bin/env escript
-mode(compile).

-define(MZBENCH_NODE,  "mzbench").
-define(DEFAULT_MZBENCH_COOKIE, mzbench).

main([ScriptName]) ->
    run(ScriptName, localhost, ?DEFAULT_MZBENCH_COOKIE);
main([ScriptName, Cookie]) ->
    run(ScriptName, localhost, erlang:list_to_atom(Cookie));
main([ScriptName, Cookie, Host]) ->
    run(ScriptName, Host, erlang:list_to_atom(Cookie));
main(_) ->
    usage().

run(Script, Host, Cookie) ->
    CodePaths = [filename:join(filename:dirname(escript:script_name()), "./apps/mzbench/ebin/")|
                 filelib:wildcard("/mz/mzbench/lib/mzbench-*/ebin/")],
    code:add_pathsz(CodePaths),
    ok = application:start(inets),
    {ok, _} = net_kernel:start([nodename_gen(), shortnames]),
    true = auth:set_cookie(Cookie),
    Node = bench_nodename(Host),
    true == net_kernel:hidden_connect_node(Node) orelse erlang:error({connect_failed, Node}),
    ScriptBody = mzbench_sup:read_script_silent(Script),
    {ok, Ref} = rpc:call(Node, mzbench_sup, run_script, [Script, ScriptBody]),
    ok = rpc:call(Node, mzbench_sup, wait_finish, [Ref], infinity),
    io:format("Finished~n").

nodename_gen() ->
    {N1,N2,N3} = erlang:now(),
    Str = lists:flatten(io_lib:format("~p-~p~p", [N1,N2,N3])),
    erlang:list_to_atom(Str).

hostname() ->
    [_, H] = string:tokens(erlang:atom_to_list(node()), "@"),
    H.

bench_nodename(localhost) ->
    bench_nodename(hostname());
bench_nodename(Host) ->
    erlang:list_to_atom(string:join([?MZBENCH_NODE, Host], "@")).

usage() ->
    io:format("Usage: ~s ScriptName [Cookie] [Host]~n", [escript:script_name()]).

